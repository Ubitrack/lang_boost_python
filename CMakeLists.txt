SET(PROJECT_NAME "ubitrack_python")
PROJECT(${PROJECT_NAME})

cmake_minimum_required(VERSION 3.4.0)

include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
conan_basic_setup(KEEP_RPATHS)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake")

include(GNUInstallDirs)
include(cmake/UbitrackConfig)
include(cmake/PythonModuleBuilder.cmake)

SET( UBITRACK_COMPILE_FLAGS ${UBITRACK_COMPILE_FLAGS} "-D${PROJECT_NAME}_EXPORTS" )
SET( ${PROJECT_NAME}_SOURCE_DIR ${${PROJECT_NAME}_SOURCE_DIR} )

set(UBITRACK_EXTRA_LIBS)

# Version of ${PROJECT_NAME}
SET( ${PROJECT_NAME}_MAJOR_VERSION 1 )
SET( ${PROJECT_NAME}_MINOR_VERSION 3 )
SET( ${PROJECT_NAME}_BUILD_VERSION 0 )

# OpenGL
SET(HAVE_OPENGL 0)
find_package(OpenGL)
IF(OPENGL_FOUND)
  add_definitions(-DHAVE_OPENGL)
  SET(HAVE_OPENGL 1)
  MESSAGE(STATUS "Found OpenGL: ${OPENGL_INCLUDE_DIR} - ${OPENGL_LIBRARIES}")
  INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
  set(UBITRACK_EXTRA_LIBS ${UBITRACK_EXTRA_LIBS} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})
ENDIF(OPENGL_FOUND)

IF(NOT PYTHON_VERSION_FULL)
  set(PYTHON_VERSION_FULL "3.6")
ENDIF(NOT PYTHON_VERSION_FULL)

include(cmake/UbiTrackDetectPython.cmake)

INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${PYTHON_NUMPY_INCLUDE_DIR})
set(UBITRACK_EXTRA_LIBS ${UBITRACK_EXTRA_LIBS} ${PYTHON_LIBRARIES})

SET(MODULE_INSTALL_PATH ${PYTHON_PACKAGE_DIR})
SET(MODULE_LIBS ${CONAN_LIBS} ${UBITRACK_EXTRA_LIBS})


MESSAGE(STATUS "Python ${PYTHON_VERSION_FULL} Executable: ${PYTHON_EXECUTABLE}")   
MESSAGE(STATUS "Python Include: ${PYTHON_INCLUDE_DIR} Numpy: ${PYTHON_NUMPY_INCLUDE_DIR}")   
MESSAGE(STATUS "Python Lib: ${PYTHON_LIBRARIES}")   
MESSAGE(STATUS "Install Directory: ${CMAKE_INSTALL_PREFIX}")   

if (PYTHON_EXECUTABLE)
  set(SETUP_PY_IN "${CMAKE_CURRENT_SOURCE_DIR}/setup.py.in")
  set(SETUP_PY    "${CMAKE_CURRENT_BINARY_DIR}/setup.py")
  set(DEPS        "${CMAKE_CURRENT_SOURCE_DIR}/lib/ubitrack/__init__.py")
  set(OUTPUT      "${CMAKE_CURRENT_BINARY_DIR}/build")

  configure_file(${SETUP_PY_IN} ${SETUP_PY})

	add_custom_command(
	  OUTPUT ${OUTPUT}/timestamp
	  COMMAND ${PYTHON_EXECUTABLE} setup.py build
	  COMMAND ${CMAKE_COMMAND} -E touch ${OUTPUT}/timestamp
	  DEPENDS ${DEPS}
	)
	add_custom_target(pybuild ALL DEPENDS ${OUTPUT}/timestamp )

  install(CODE "execute_process(COMMAND ${PYTHON_EXECUTABLE} ${SETUP_PY} install --prefix=${CMAKE_INSTALL_PREFIX})")
endif(PYTHON_EXECUTABLE)

INCLUDE_DIRECTORIES("${CMAKE_SOURCE_DIR}/include")

add_subdirectory(src)

enable_testing()
add_test( nosetests "${CMAKE_COMMAND}" -P ${CMAKE_BINARY_DIR}/testrunner.cmake )
